///////////////////////////////////////////////////////////////////////////////
//                                                                            /
// IAR C/C++ Compiler V8.10.1.10194/W32 for 8051        12/Dec/2014  00:51:34 /
// Copyright 2004-2011 IAR Systems AB.                                        /
//                                                                            /
//    Core               =  plain                                             /
//    Code model         =  banked                                            /
//    Data model         =  large                                             /
//    Calling convention =  xdata reentrant                                   /
//    Constant location  =  data_rom                                          /
//    Dptr setup         =  1,16                                              /
//    Source file        =  D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zsta /
//                          ck\Samples\SampleApp\Source\rssi_test\c\digio.c   /
//    Command line       =  -f "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\ /
//                          zstack\Samples\SampleApp\CC2530DB\..\..\..\Tools\ /
//                          CC2530DB\f8wEndev.cfg" (-DCPU32MHZ                /
//                          -DROOT=__near_func -DMAC_CFG_TX_DATA_MAX=3        /
//                          -DMAC_CFG_TX_MAX=6 -DMAC_CFG_RX_MAX=3) -f         /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\Tools\CC2 /
//                          530DB\f8wConfig.cfg" (-DZIGBEEPRO -DSECURE=1      /
//                          -DZG_SECURE_DYNAMIC=0 -DREFLECTOR                 /
//                          -DZDAPP_CONFIG_PAN_ID=0xFFFF                      /
//                          -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_M /
//                          ASK=0x007F -DBEACON_REQUEST_DELAY=100             /
//                          -DBEACON_REQ_DELAY_MASK=0x00FF                    /
//                          -DLINK_STATUS_JITTER_MASK=0x007F                  /
//                          -DROUTE_EXPIRY_TIME=30 -DAPSC_ACK_WAIT_DURATION_P /
//                          OLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=60          /
//                          -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3   /
//                          -DNWK_MAX_DATA_RETRIES=2                          /
//                          -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9        /
//                          -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=30          /
//                          -DNWK_MAX_BINDING_ENTRIES=1                       /
//                          -DMAX_BINDING_CLUSTER_IDS=4 -DASSERT_RESET        /
//                          -DMAC_MAX_FRAME_SIZE=116                          /
//                          -DZDNWKMGR_MIN_TRANSMISSIONS=20 "-DCONST=const    /
//                          __code" -DGENERIC=__generic                       /
//                          -DRFD_RCVC_ALWAYS_ON=FALSE -DPOLL_RATE=8000       /
//                          -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=1000) /
//                           -DREJOIN_POLL_RATE=440                           /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\Source\rssi_test\c\digio.c" /
//                           -D NV_INIT -D NV_RESTORE -D HOLD_AUTO_START -D   /
//                          MT_TASK -D xMT_APP_FUNC -D MT_SYS_FUNC -D         /
//                          MT_ZDO_FUNC -D xMT_ZDO_MGMT -D ISR_KEYINTERRUPT   /
//                          -D POWER_SAVING -D LONG_POLL_TIMES -D             /
//                          HAVE_TEST_FUN -D RESUME_TIME_TEST -D IRR_ED -D    /
//                          M_V332 -lC "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\P /
//                          rojects\zstack\Samples\SampleApp\CC2530DB\IRR_ED_ /
//                          device\List\" -lA "D:\RE_1_2_0_FORMAL_APP(251)-14 /
//                          -12-8\Projects\zstack\Samples\SampleApp\CC2530DB\ /
//                          IRR_ED_device\List\" --diag_suppress Pe001,Pa010  /
//                          -o "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\ /
//                          zstack\Samples\SampleApp\CC2530DB\IRR_ED_device\O /
//                          bj\" -e --no_cse --no_unroll --no_inline          /
//                          --no_code_motion --no_tbaa --debug --core=plain   /
//                          --dptr=16,1 --data_model=large                    /
//                          --code_model=banked --calling_convention=xdata_re /
//                          entrant --place_constants=data_rom                /
//                          --nr_virtual_regs 16 -I                           /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\" -I               /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\Source\" -I     /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\Source\rssi_tes /
//                          t\h\" -I "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Pro /
//                          jects\zstack\Samples\SampleApp\CC2530DB\..\Source /
//                          \IRR_enddevice\" -I "D:\RE_1_2_0_FORMAL_APP(251)- /
//                          14-12-8\Projects\zstack\Samples\SampleApp\CC2530D /
//                          B\..\..\..\ZMain\TI2530DB\" -I                    /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\hal\include\" -I                          /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\hal\target\CC2530EB\" -I                  /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\include\" -I                          /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\high_level\" -I                       /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\low_level\srf04\" -I                  /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mac\low_level\srf04\single_chip\" -I      /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\mt\" -I "D:\RE_1_2_0_FORMAL_APP(251)-14-1 /
//                          2-8\Projects\zstack\Samples\SampleApp\CC2530DB\.. /
//                          \..\..\..\..\Components\osal\include\" -I         /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\saddr\" -I                       /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\services\sdata\" -I                       /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\af\" -I "D:\RE_1_2_0_FORMAL_APP(251 /
//                          )-14-12-8\Projects\zstack\Samples\SampleApp\CC253 /
//                          0DB\..\..\..\..\..\Components\stack\nwk\" -I      /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sapi\" -I                           /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\sec\" -I "D:\RE_1_2_0_FORMAL_APP(25 /
//                          1)-14-12-8\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\stack\sys\" -I     /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\stack\zdo\" -I "D:\RE_1_2_0_FORMAL_APP(25 /
//                          1)-14-12-8\Projects\zstack\Samples\SampleApp\CC25 /
//                          30DB\..\..\..\..\..\Components\zmac\" -I          /
//                          "D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zst /
//                          ack\Samples\SampleApp\CC2530DB\..\..\..\..\..\Com /
//                          ponents\zmac\f8w\" -On --require_prototypes       /
//    List file          =  D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zsta /
//                          ck\Samples\SampleApp\CC2530DB\IRR_ED_device\List\ /
//                          digio.s51                                         /
//                                                                            /
//                                                                            /
///////////////////////////////////////////////////////////////////////////////

        NAME digio

        RTMODEL "__SystemLibrary", "CLib"
        RTMODEL "__calling_convention", "xdata_reentrant"
        RTMODEL "__code_model", "banked"
        RTMODEL "__core", "plain"
        RTMODEL "__data_model", "large"
        RTMODEL "__dptr_size", "16"
        RTMODEL "__extended_stack", "disabled"
        RTMODEL "__location_for_constants", "data"
        RTMODEL "__number_of_dptrs", "1"
        RTMODEL "__rt_version", "1"

        RSEG DOVERLAY:DATA:NOROOT(0)
        RSEG IOVERLAY:IDATA:NOROOT(0)
        RSEG ISTACK:IDATA:NOROOT(0)
        RSEG PSTACK:XDATA:NOROOT(0)
        RSEG XSTACK:XDATA:NOROOT(0)

        EXTERN ?BANKED_ENTER_XDATA
        EXTERN ?BANKED_LEAVE_XDATA
        EXTERN ?BDISPATCH
        EXTERN ?BRET
        EXTERN ?S_SHL
        EXTERN ?V0
        EXTERN __INIT_XDATA_Z

        PUBLIC ??halDigioClear?relay
        FUNCTION ??halDigioClear?relay,0203H
        PUBLIC ??halDigioConfig?relay
        FUNCTION ??halDigioConfig?relay,0203H
        PUBLIC ??halDigioGet?relay
        FUNCTION ??halDigioGet?relay,0203H
        PUBLIC ??halDigioIntClear?relay
        FUNCTION ??halDigioIntClear?relay,0203H
        PUBLIC ??halDigioIntConnect?relay
        FUNCTION ??halDigioIntConnect?relay,0203H
        PUBLIC ??halDigioIntDisable?relay
        FUNCTION ??halDigioIntDisable?relay,0203H
        PUBLIC ??halDigioIntEnable?relay
        FUNCTION ??halDigioIntEnable?relay,0203H
        PUBLIC ??halDigioIntSetEdge?relay
        FUNCTION ??halDigioIntSetEdge?relay,0203H
        PUBLIC ??halDigioSet?relay
        FUNCTION ??halDigioSet?relay,0203H
        PUBLIC ??halDigioToggle?relay
        FUNCTION ??halDigioToggle?relay,0203H
        PUBWEAK IEN2
        PUBWEAK P0DIR
        PUBWEAK P0IEN
        PUBWEAK P0IFG
        PUBWEAK P0SEL
        PUBWEAK P1DIR
        PUBWEAK P1IEN
        PUBWEAK P1IFG
        PUBWEAK P1SEL
        PUBWEAK P2DIR
        PUBWEAK P2IEN
        PUBWEAK P2IFG
        PUBWEAK P2SEL
        PUBWEAK _A_IEN0
        PUBWEAK _A_IEN1
        PUBWEAK _A_P0
        PUBWEAK _A_P1
        PUBWEAK _A_P2
        PUBLIC halDigioClear
        FUNCTION halDigioClear,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halDigioConfig
        FUNCTION halDigioConfig,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 10, STACK
        PUBLIC halDigioGet
        FUNCTION halDigioGet,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halDigioIntClear
        FUNCTION halDigioIntClear,0203H
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halDigioIntConnect
        FUNCTION halDigioIntConnect,021203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        PUBLIC halDigioIntDisable
        FUNCTION halDigioIntDisable,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC halDigioIntEnable
        FUNCTION halDigioIntEnable,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halDigioIntSetEdge
        FUNCTION halDigioIntSetEdge,0203H
        ARGFRAME XSTACK, 0, STACK
        PUBLIC halDigioSet
        FUNCTION halDigioSet,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        PUBLIC halDigioToggle
        FUNCTION halDigioToggle,0203H
        ARGFRAME XSTACK, 0, STACK
        LOCFRAME ISTACK, 2, STACK
        
        CFI Names cfiNames0
        CFI StackFrame CFA_SP SP IDATA
        CFI StackFrame CFA_PSP16 PSP16 XDATA
        CFI StackFrame CFA_XSP16 XSP16 XDATA
        CFI StaticOverlayFrame CFA_IOVERLAY IOVERLAY
        CFI StaticOverlayFrame CFA_DOVERLAY DOVERLAY
        CFI Resource `PSW.CY`:1, `B.BR0`:1, `B.BR1`:1, `B.BR2`:1, `B.BR3`:1
        CFI Resource `B.BR4`:1, `B.BR5`:1, `B.BR6`:1, `B.BR7`:1, `VB.BR8`:1
        CFI Resource `VB.BR9`:1, `VB.BR10`:1, `VB.BR11`:1, `VB.BR12`:1
        CFI Resource `VB.BR13`:1, `VB.BR14`:1, `VB.BR15`:1, VB:8, B:8, A:8
        CFI Resource PSW:8, DPL0:8, DPH0:8, R0:8, R1:8, R2:8, R3:8, R4:8, R5:8
        CFI Resource R6:8, R7:8, V0:8, V1:8, V2:8, V3:8, V4:8, V5:8, V6:8, V7:8
        CFI Resource V8:8, V9:8, V10:8, V11:8, V12:8, V13:8, V14:8, V15:8, SP:8
        CFI Resource PSPH:8, PSPL:8, PSP16:16, XSPH:8, XSPL:8, XSP16:16
        CFI VirtualResource ?RET:24
        CFI Resource ?BRET_EXT:8
        CFI VirtualResource ?RET_HIGH:8, ?RET_LOW:8
        CFI ResourceParts PSP16 PSPH, PSPL
        CFI ResourceParts XSP16 XSPH, XSPL
        CFI ResourceParts ?RET ?BRET_EXT, ?RET_HIGH, ?RET_LOW
        CFI EndNames cfiNames0
        
        CFI Common cfiCommon0 Using cfiNames0
        CFI CodeAlign 1
        CFI DataAlign -1
        CFI ReturnAddress ?RET CODE
        CFI CFA_DOVERLAY Used
        CFI CFA_IOVERLAY Used
        CFI CFA_SP SP+-3
        CFI CFA_PSP16 PSP16+0
        CFI CFA_XSP16 XSP16+0
        CFI `PSW.CY` SameValue
        CFI `B.BR0` SameValue
        CFI `B.BR1` SameValue
        CFI `B.BR2` SameValue
        CFI `B.BR3` SameValue
        CFI `B.BR4` SameValue
        CFI `B.BR5` SameValue
        CFI `B.BR6` SameValue
        CFI `B.BR7` SameValue
        CFI `VB.BR8` SameValue
        CFI `VB.BR9` SameValue
        CFI `VB.BR10` SameValue
        CFI `VB.BR11` SameValue
        CFI `VB.BR12` SameValue
        CFI `VB.BR13` SameValue
        CFI `VB.BR14` SameValue
        CFI `VB.BR15` SameValue
        CFI VB SameValue
        CFI B Undefined
        CFI A Undefined
        CFI PSW SameValue
        CFI DPL0 SameValue
        CFI DPH0 SameValue
        CFI R0 Undefined
        CFI R1 Undefined
        CFI R2 Undefined
        CFI R3 Undefined
        CFI R4 Undefined
        CFI R5 Undefined
        CFI R6 SameValue
        CFI R7 SameValue
        CFI V0 SameValue
        CFI V1 SameValue
        CFI V2 SameValue
        CFI V3 SameValue
        CFI V4 SameValue
        CFI V5 SameValue
        CFI V6 SameValue
        CFI V7 SameValue
        CFI V8 SameValue
        CFI V9 SameValue
        CFI V10 SameValue
        CFI V11 SameValue
        CFI V12 SameValue
        CFI V13 SameValue
        CFI V14 SameValue
        CFI V15 SameValue
        CFI PSPH Undefined
        CFI PSPL Undefined
        CFI XSPH Undefined
        CFI XSPL Undefined
        CFI ?RET Concat
        CFI ?BRET_EXT Frame(CFA_SP, 3)
        CFI ?RET_HIGH Frame(CFA_SP, 2)
        CFI ?RET_LOW Frame(CFA_SP, 1)
        CFI EndCommon cfiCommon0
        
halDigioClear       SYMBOL "halDigioClear"
??halDigioClear?relay SYMBOL "?relay", halDigioClear
halDigioConfig      SYMBOL "halDigioConfig"
??halDigioConfig?relay SYMBOL "?relay", halDigioConfig
halDigioGet         SYMBOL "halDigioGet"
??halDigioGet?relay SYMBOL "?relay", halDigioGet
halDigioIntClear    SYMBOL "halDigioIntClear"
??halDigioIntClear?relay SYMBOL "?relay", halDigioIntClear
halDigioIntConnect  SYMBOL "halDigioIntConnect"
??halDigioIntConnect?relay SYMBOL "?relay", halDigioIntConnect
halDigioIntDisable  SYMBOL "halDigioIntDisable"
??halDigioIntDisable?relay SYMBOL "?relay", halDigioIntDisable
halDigioIntEnable   SYMBOL "halDigioIntEnable"
??halDigioIntEnable?relay SYMBOL "?relay", halDigioIntEnable
halDigioIntSetEdge  SYMBOL "halDigioIntSetEdge"
??halDigioIntSetEdge?relay SYMBOL "?relay", halDigioIntSetEdge
halDigioSet         SYMBOL "halDigioSet"
??halDigioSet?relay SYMBOL "?relay", halDigioSet
halDigioToggle      SYMBOL "halDigioToggle"
??halDigioToggle?relay SYMBOL "?relay", halDigioToggle

// D:\RE_1_2_0_FORMAL_APP(251)-14-12-8\Projects\zstack\Samples\SampleApp\Source\rssi_test\c\digio.c
//    1 
//    2 /***********************************************************************************
//    3   Filename:     hal_digio.c
//    4 
//    5   Description:  HAL digital IO functionality
//    6 
//    7 ***********************************************************************************/
//    8 
//    9 /***********************************************************************************
//   10 * INCLUDES
//   11 */
//   12 #include "hal_types.h"
//   13 #include "hal_defs.h"
//   14 #include "board.h"

        ASEGN SFR_AN:DATA:NOROOT,080H
// union <unnamed> volatile __sfr _A_P0
_A_P0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,089H
// unsigned char volatile __sfr P0IFG
P0IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08aH
// unsigned char volatile __sfr P1IFG
P1IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08bH
// unsigned char volatile __sfr P2IFG
P2IFG:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,08dH
// unsigned char volatile __sfr P1IEN
P1IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,090H
// union <unnamed> volatile __sfr _A_P1
_A_P1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,09aH
// unsigned char volatile __sfr IEN2
IEN2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a0H
// union <unnamed> volatile __sfr _A_P2
_A_P2:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0a8H
// union <unnamed> volatile __sfr _A_IEN0
_A_IEN0:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0abH
// unsigned char volatile __sfr P0IEN
P0IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0acH
// unsigned char volatile __sfr P2IEN
P2IEN:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0b8H
// union <unnamed> volatile __sfr _A_IEN1
_A_IEN1:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f3H
// unsigned char volatile __sfr P0SEL
P0SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f4H
// unsigned char volatile __sfr P1SEL
P1SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0f5H
// unsigned char volatile __sfr P2SEL
P2SEL:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0fdH
// unsigned char volatile __sfr P0DIR
P0DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0feH
// unsigned char volatile __sfr P1DIR
P1DIR:
        DATA8
        DS 1

        ASEGN SFR_AN:DATA:NOROOT,0ffH
// unsigned char volatile __sfr P2DIR
P2DIR:
        DATA8
        DS 1
//   15 #include "int.h"
//   16 #include "digio.h"
//   17 
//   18 
//   19 /***********************************************************************************
//   20 * LOCAL VARIABLES
//   21 */

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   22 static ISR_FUNC_PTR port0_isr_tbl[8] = {0};
port0_isr_tbl:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   23 static ISR_FUNC_PTR port1_isr_tbl[8] = {0};
port1_isr_tbl:
        DS 16
        REQUIRE __INIT_XDATA_Z

        RSEG XDATA_Z:XDATA:NOROOT(0)
        DATA8
//   24 static ISR_FUNC_PTR port2_isr_tbl[5] = {0};
port2_isr_tbl:
        DS 10
        REQUIRE __INIT_XDATA_Z
//   25 
//   26 
//   27 
//   28 
//   29 #define PICTL_PADSC_BM 0x80
//   30 #define PICTL_P2IEN_BM 0x40
//   31 #define PICTL_P0IENH_BM 0x20
//   32 #define PICTL_P0IENL_BM 0x10
//   33 #define PICTL_P2ICON_BM 0x08
//   34 #define PICTL_P1ICONH_BM 0x04
//   35 #define PICTL_P1ICONL_BM 0x02
//   36 #define PICTL_P1ICON_BM 0x06 // Combined - for compatibility
//   37 #define PICTL_P0ICON_BM 0x01
//   38 
//   39 
//   40 /***********************************************************************************
//   41 * GLOBAL FUNCTIONS
//   42 */
//   43 
//   44 /***********************************************************************************
//   45 * @fn      halDigioConfig
//   46 *
//   47 * @brief   Configure the pin as specified by p.
//   48 *
//   49 * @param   digioConfig* p - pointer to configuration structure for IO pin
//   50 *
//   51 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//   52 */
//   53 
//   54 //comment: find better way of doing this. SFR registers can not be accessed by pointers, therefore code is different from MSP430 code
//   55 // comment: currently support only P0 and P1

        RSEG BANKED_CODE:CODE:NOROOT(0)
//   56 uint8 halDigioConfig(const digioConfig* p)
halDigioConfig:
        CFI Block cfiBlock0 Using cfiCommon0
        CFI Function halDigioConfig
        CODE
//   57 {
        MOV     A,#-0xa
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 10)
        ; Saved register size: 10
        ; Auto size: 0
//   58   //  register volatile uint8* dir;
//   59     register const uint8 bitmask = p->pin_bm;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R4,A
//   60 
//   61     // Sanity check
//   62     if ((bitmask == 0) || (bitmask != (uint8)BV(p->pin)))
        MOV     A,R4
        JZ      ??halDigioConfig_0
        MOV     ?V0 + 0,#0x1
        MOV     ?V0 + 1,#0x0
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,#?V0 + 0
        LCALL   ?S_SHL
        MOV     A,?V0 + 0
        XRL     A,R4
        JZ      ??halDigioConfig_1
//   63     {
//   64         return(HAL_DIGIO_ERROR);
??halDigioConfig_0:
        MOV     R1,#-0x1
        LJMP    ??halDigioConfig_2 & 0xFFFF
//   65     }
//   66 
//   67     switch(p->port)
??halDigioConfig_1:
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioConfig_3
        DEC     A
        JZ      ??halDigioConfig_4
        DEC     A
        JZ      ??halDigioConfig_5
        LJMP    ??halDigioConfig_6 & 0xFFFF
//   68     {
//   69     case 0: P0SEL &= ~bitmask; 
??halDigioConfig_3:
        MOV     A,R4
        CPL     A
        ANL     0xf3,A
//   70             if (p->dir == HAL_DIGIO_OUTPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioConfig_7
//   71             {
//   72                 if (p->initval == 1)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioConfig_8
//   73                 {
//   74                   P0 |= bitmask;  
        MOV     A,R4
        ORL     0x80,A
        SJMP    ??halDigioConfig_9
//   75                 }
//   76                 else
//   77                 {
//   78                   P0 &= ~bitmask;
??halDigioConfig_8:
        MOV     A,R4
        CPL     A
        ANL     0x80,A
//   79                 }
//   80                 P0DIR |= bitmask;
??halDigioConfig_9:
        MOV     A,R4
        ORL     0xfd,A
        SJMP    ??halDigioConfig_10
//   81              }
//   82              else // input
//   83              {
//   84                 P0DIR &= ~bitmask;
??halDigioConfig_7:
        MOV     A,R4
        CPL     A
        ANL     0xfd,A
//   85              }
//   86             break;
        SJMP    ??halDigioConfig_10
//   87      case 1: P1SEL &= ~bitmask; 
??halDigioConfig_4:
        MOV     A,R4
        CPL     A
        ANL     0xf4,A
//   88             if (p->dir == HAL_DIGIO_OUTPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioConfig_11
//   89             {
//   90                 if (p->initval == 1)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioConfig_12
//   91                 {
//   92                   P1 |= bitmask;  
        MOV     A,R4
        ORL     0x90,A
        SJMP    ??halDigioConfig_13
//   93                 }
//   94                 else
//   95                 {
//   96                   P1 &= ~bitmask;
??halDigioConfig_12:
        MOV     A,R4
        CPL     A
        ANL     0x90,A
//   97                 }
//   98                 P1DIR |= bitmask;
??halDigioConfig_13:
        MOV     A,R4
        ORL     0xfe,A
        SJMP    ??halDigioConfig_10
//   99              }
//  100              else // input
//  101              {
//  102                 P1DIR &= ~bitmask;
??halDigioConfig_11:
        MOV     A,R4
        CPL     A
        ANL     0xfe,A
//  103              }
//  104             break;
        SJMP    ??halDigioConfig_10
//  105      case 2: P2SEL &= ~bitmask; 
??halDigioConfig_5:
        MOV     A,R4
        CPL     A
        ANL     0xf5,A
//  106             if (p->dir == HAL_DIGIO_OUTPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioConfig_14
//  107             {
//  108                 if (p->initval == 1)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioConfig_15
//  109                 {
//  110                   P2 |= bitmask;  
        MOV     A,R4
        ORL     0xa0,A
        SJMP    ??halDigioConfig_16
//  111                 }
//  112                 else
//  113                 {
//  114                   P2 &= ~bitmask;
??halDigioConfig_15:
        MOV     A,R4
        CPL     A
        ANL     0xa0,A
//  115                 }
//  116                 P2DIR |= bitmask;
??halDigioConfig_16:
        MOV     A,R4
        ORL     0xff,A
        SJMP    ??halDigioConfig_10
//  117              }
//  118              else // input
//  119              {
//  120                 P2DIR &= ~bitmask;
??halDigioConfig_14:
        MOV     A,R4
        CPL     A
        ANL     0xff,A
//  121              }
//  122             break;
        SJMP    ??halDigioConfig_10
//  123     //case 1: P1SEL &= ~bitmask; out = &P1OUT; dir = &P1DIR; break;
//  124     //case 2: P2SEL &= ~bitmask; out = &P2OUT; dir = &P2DIR; break;
//  125     default: return(HAL_DIGIO_ERROR);
??halDigioConfig_6:
        MOV     R1,#-0x1
        SJMP    ??halDigioConfig_2
//  126     }
//  127     return(HAL_DIGIO_OK);
??halDigioConfig_10:
        MOV     R1,#0x0
??halDigioConfig_2:
        MOV     R7,#0x2
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock0
        REQUIRE P0SEL
        REQUIRE _A_P0
        REQUIRE P0DIR
        REQUIRE P1SEL
        REQUIRE _A_P1
        REQUIRE P1DIR
        REQUIRE P2SEL
        REQUIRE _A_P2
        REQUIRE P2DIR
//  128 }
//  129 
//  130 
//  131 /***********************************************************************************
//  132 * @fn      halDigioSet
//  133 *
//  134 * @brief   Set output pin
//  135 *
//  136 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  137 *
//  138 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  139 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  140 uint8 halDigioSet(const digioConfig* p)
halDigioSet:
        CFI Block cfiBlock1 Using cfiCommon0
        CFI Function halDigioSet
        CODE
//  141 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  142    if (p->dir == HAL_DIGIO_OUTPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioSet_0
//  143     {
//  144         switch (p->port)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioSet_1
        DEC     A
        JZ      ??halDigioSet_2
        DEC     A
        JZ      ??halDigioSet_3
        SJMP    ??halDigioSet_4
//  145         {
//  146         case 0: P0 |= p->pin_bm; break;
??halDigioSet_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     0x80,A
        SJMP    ??halDigioSet_5
//  147         case 1: P1 |= p->pin_bm; break;
??halDigioSet_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     0x90,A
        SJMP    ??halDigioSet_5
//  148         case 2: P2 |= p->pin_bm; break;
??halDigioSet_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     0xa0,A
        SJMP    ??halDigioSet_5
//  149         default: return(HAL_DIGIO_ERROR);
??halDigioSet_4:
        MOV     R1,#-0x1
        SJMP    ??halDigioSet_6
//  150         }
//  151         return(HAL_DIGIO_OK);
??halDigioSet_5:
        MOV     R1,#0x0
        SJMP    ??halDigioSet_6
//  152     }
//  153     return(HAL_DIGIO_ERROR);
??halDigioSet_0:
        MOV     R1,#-0x1
??halDigioSet_6:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock1
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
//  154 }
//  155 
//  156 
//  157 /***********************************************************************************
//  158 * @fn      halDigioClear
//  159 *
//  160 * @brief   Clear output pin
//  161 *
//  162 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  163 *
//  164 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  165 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  166 uint8 halDigioClear(const digioConfig* p)
halDigioClear:
        CFI Block cfiBlock2 Using cfiCommon0
        CFI Function halDigioClear
        CODE
//  167 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  168    if (p->dir == HAL_DIGIO_OUTPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioClear_0
//  169     {
//  170         switch (p->port)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioClear_1
        DEC     A
        JZ      ??halDigioClear_2
        DEC     A
        JZ      ??halDigioClear_3
        SJMP    ??halDigioClear_4
//  171         {
//  172         case 0: P0 &= ~p->pin_bm; break;
??halDigioClear_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        ANL     0x80,A
        SJMP    ??halDigioClear_5
//  173         case 1: P1 &= ~p->pin_bm; break;
??halDigioClear_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        ANL     0x90,A
        SJMP    ??halDigioClear_5
//  174         case 2: P2 &= ~p->pin_bm; break;
??halDigioClear_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        ANL     0xa0,A
        SJMP    ??halDigioClear_5
//  175         default: return(HAL_DIGIO_ERROR);
??halDigioClear_4:
        MOV     R1,#-0x1
        SJMP    ??halDigioClear_6
//  176         }
//  177         return(HAL_DIGIO_OK);
??halDigioClear_5:
        MOV     R1,#0x0
        SJMP    ??halDigioClear_6
//  178     }
//  179     return(HAL_DIGIO_ERROR);
??halDigioClear_0:
        MOV     R1,#-0x1
??halDigioClear_6:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock2
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
//  180 }
//  181 
//  182 
//  183 /***********************************************************************************
//  184 * @fn      halDigioToggle
//  185 *
//  186 * @brief   Toggle output pin
//  187 *
//  188 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  189 *
//  190 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  191 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  192 uint8 halDigioToggle(const digioConfig* p)
halDigioToggle:
        CFI Block cfiBlock3 Using cfiCommon0
        CFI Function halDigioToggle
        CODE
//  193 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  194   if (p->dir == HAL_DIGIO_OUTPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     A,#0x1
        JNZ     ??halDigioToggle_0
//  195     {
//  196         switch (p->port)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioToggle_1
        DEC     A
        JZ      ??halDigioToggle_2
        DEC     A
        JZ      ??halDigioToggle_3
        SJMP    ??halDigioToggle_4
//  197         {
//  198         case 0: P0 ^= p->pin_bm; break;
??halDigioToggle_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     0x80,A
        SJMP    ??halDigioToggle_5
//  199         case 1: P1 ^= p->pin_bm; break;
??halDigioToggle_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     0x90,A
        SJMP    ??halDigioToggle_5
//  200         case 2: P2 ^= p->pin_bm; break;
??halDigioToggle_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        XRL     0xa0,A
        SJMP    ??halDigioToggle_5
//  201         default: return(HAL_DIGIO_ERROR);
??halDigioToggle_4:
        MOV     R1,#-0x1
        SJMP    ??halDigioToggle_6
//  202         }
//  203         return(HAL_DIGIO_OK);
??halDigioToggle_5:
        MOV     R1,#0x0
        SJMP    ??halDigioToggle_6
//  204     }
//  205     return(HAL_DIGIO_ERROR);
??halDigioToggle_0:
        MOV     R1,#-0x1
??halDigioToggle_6:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock3
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
//  206 }
//  207 
//  208 
//  209 /***********************************************************************************
//  210 * @fn      halDigioGet
//  211 *
//  212 * @brief   Get value on input pin
//  213 *
//  214 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  215 *
//  216 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  217 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  218 uint8 halDigioGet(const digioConfig* p)
halDigioGet:
        CFI Block cfiBlock4 Using cfiCommon0
        CFI Function halDigioGet
        CODE
//  219 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  220     if (p->dir == HAL_DIGIO_INPUT)
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        JNZ     ??halDigioGet_0
//  221     {
//  222         switch (p->port)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioGet_1
        DEC     A
        JZ      ??halDigioGet_2
        DEC     A
        JZ      ??halDigioGet_3
        SJMP    ??halDigioGet_0
//  223         {
//  224         case 0: return (P0 & p->pin_bm ? 1 : 0);
??halDigioGet_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,0x80
        JZ      ??halDigioGet_4
        MOV     R1,#0x1
        SJMP    ??halDigioGet_5
??halDigioGet_4:
        MOV     R1,#0x0
        SJMP    ??halDigioGet_5
//  225         case 1: return (P1 & p->pin_bm ? 1 : 0);
??halDigioGet_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,0x90
        JZ      ??halDigioGet_6
        MOV     R1,#0x1
        SJMP    ??halDigioGet_5
??halDigioGet_6:
        MOV     R1,#0x0
        SJMP    ??halDigioGet_5
//  226         case 2: return (P2 & p->pin_bm ? 1 : 0);
??halDigioGet_3:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ANL     A,0xa0
        JZ      ??halDigioGet_7
        MOV     R1,#0x1
        SJMP    ??halDigioGet_5
??halDigioGet_7:
        MOV     R1,#0x0
        SJMP    ??halDigioGet_5
//  227         default: break;
//  228         }
//  229     }
//  230     return(HAL_DIGIO_ERROR);
??halDigioGet_0:
        MOV     R1,#-0x1
??halDigioGet_5:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock4
        REQUIRE _A_P0
        REQUIRE _A_P1
        REQUIRE _A_P2
//  231 }
//  232 
//  233 
//  234 /***********************************************************************************
//  235 * @fn      halDigioIntConnect
//  236 *
//  237 * @brief   Connect function to IO interrupt
//  238 *
//  239 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  240 *          ISR_FUNC_PTR func - pointer to function
//  241 *
//  242 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  243 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  244 uint8 halDigioIntConnect(const digioConfig *p, ISR_FUNC_PTR func)
halDigioIntConnect:
        CFI Block cfiBlock5 Using cfiCommon0
        CFI Function halDigioIntConnect
        CODE
//  245 {
        FUNCALL halDigioIntConnect, halDigioIntClear
        LOCFRAME ISTACK, 0, STACK
        LOCFRAME PSTACK, 0, STACK
        LOCFRAME XSTACK, 12, STACK
        LOCFRAME IOVERLAY, 0, STATIC
        LOCFRAME DOVERLAY, 0, STATIC
        ARGFRAME ISTACK, 0, STACK
        ARGFRAME PSTACK, 0, STACK
        ARGFRAME XSTACK, 12, STACK
        ARGFRAME IOVERLAY, 0, STATIC
        ARGFRAME DOVERLAY, 0, STATIC
        MOV     A,#-0xc
        LCALL   ?BANKED_ENTER_XDATA
        CFI DPH0 load(1, XDATA, add(CFA_XSP16, literal(-1)))
        CFI DPL0 load(1, XDATA, add(CFA_XSP16, literal(-2)))
        CFI ?BRET_EXT load(1, XDATA, add(CFA_XSP16, literal(-3)))
        CFI ?RET_HIGH load(1, XDATA, add(CFA_XSP16, literal(-4)))
        CFI ?RET_LOW load(1, XDATA, add(CFA_XSP16, literal(-5)))
        CFI R7 load(1, XDATA, add(CFA_XSP16, literal(-6)))
        CFI V3 load(1, XDATA, add(CFA_XSP16, literal(-7)))
        CFI V2 load(1, XDATA, add(CFA_XSP16, literal(-8)))
        CFI V1 load(1, XDATA, add(CFA_XSP16, literal(-9)))
        CFI V0 load(1, XDATA, add(CFA_XSP16, literal(-10)))
        CFI VB load(1, XDATA, add(CFA_XSP16, literal(-11)))
        CFI R6 load(1, XDATA, add(CFA_XSP16, literal(-12)))
        CFI CFA_SP SP+0
        CFI CFA_XSP16 add(XSP16, 12)
        ; Saved register size: 12
        ; Auto size: 0
        MOV     A,R2
        MOV     R6,A
        MOV     A,R3
        MOV     R7,A
        MOV     ?V0 + 0,R4
        MOV     ?V0 + 1,R5
//  246   istate_t key;
//  247     HAL_INT_LOCK(key);
        MOV     C,0xa8.7
        CLR     A
        RLC     A
        MOV     R0,A
        MOV     R1,#0x0
        MOV     ?V0 + 2,R0
        MOV     ?V0 + 3,R1
        CLR     0xa8.7
//  248     switch (p->port)
        MOV     DPL,R6
        MOV     DPH,R7
        MOVX    A,@DPTR
        JZ      ??halDigioIntConnect_0
        DEC     A
        JZ      ??halDigioIntConnect_1
        DEC     A
        JZ      ??halDigioIntConnect_2
        LJMP    ??halDigioIntConnect_3 & 0xFFFF
//  249     {
//  250     case 0: port0_isr_tbl[p->pin] = func; break;
??halDigioIntConnect_0:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#port0_isr_tbl & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(port0_isr_tbl >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        SJMP    ??halDigioIntConnect_4
//  251     case 1: port1_isr_tbl[p->pin] = func; break;
??halDigioIntConnect_1:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#port1_isr_tbl & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(port1_isr_tbl >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        SJMP    ??halDigioIntConnect_4
//  252     case 2: port2_isr_tbl[p->pin] = func; break;
??halDigioIntConnect_2:
        MOV     DPL,R6
        MOV     DPH,R7
        INC     DPTR
        MOVX    A,@DPTR
        MOV     R0,A
        MOV     R1,#0x0
        MOV     A,R0
        MOV     B,#0x2
        MUL     AB
        XCH     A,R0
        MOV     R2,B
        MOV     B,#0x0
        MUL     AB
        ADD     A,R2
        MOV     R2,A
        MOV     B,#0x2
        MOV     A,R1
        MUL     AB
        ADD     A,R2
        MOV     R1,A
        MOV     A,#port2_isr_tbl & 0xff
        ADD     A,R0
        MOV     DPL,A
        MOV     A,#(port2_isr_tbl >> 8) & 0xff
        ADDC    A,R1
        MOV     DPH,A
        MOV     A,?V0 + 0
        MOVX    @DPTR,A
        INC     DPTR
        MOV     A,?V0 + 1
        MOVX    @DPTR,A
        SJMP    ??halDigioIntConnect_4
//  253     default: HAL_INT_UNLOCK(key); return(HAL_DIGIO_ERROR);
??halDigioIntConnect_3:
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
        MOV     R1,#-0x1
        SJMP    ??halDigioIntConnect_5
//  254     }
//  255     halDigioIntClear(p);
??halDigioIntConnect_4:
        ; Setup parameters for call to function halDigioIntClear
        MOV     A,R6
        MOV     R2,A
        MOV     A,R7
        MOV     R3,A
        LCALL   ??halDigioIntClear?relay
        MOV     A,R1
//  256     HAL_INT_UNLOCK(key);
        MOV     A,?V0 + 2
        MOV     C,0xE0 /* A   */.0
        MOV     0xa8.7,C
//  257     return(HAL_DIGIO_OK);
        MOV     R1,#0x0
??halDigioIntConnect_5:
        MOV     R7,#0x4
        LJMP    ?BANKED_LEAVE_XDATA
        CFI EndBlock cfiBlock5
        REQUIRE _A_IEN0
//  258 }
//  259 
//  260 
//  261 /***********************************************************************************
//  262 * @fn      halDigioIntEnable
//  263 *
//  264 * @brief   Enable interrupt on IO pin
//  265 *
//  266 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  267 *
//  268 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  269 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  270 uint8 halDigioIntEnable(const digioConfig *p)
halDigioIntEnable:
        CFI Block cfiBlock6 Using cfiCommon0
        CFI Function halDigioIntEnable
        CODE
//  271 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  272      switch (p->port)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioIntEnable_0
        DEC     A
        JZ      ??halDigioIntEnable_1
        DEC     A
        JZ      ??halDigioIntEnable_2
        SJMP    ??halDigioIntEnable_3
//  273     {
//  274 
//  275 
//  276     case 0: 
//  277       P0IE = 1;    // set P0IE bit
??halDigioIntEnable_0:
        SETB    0xb8.5
//  278       P0IEN |= p->pin_bm;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     0xab,A
//  279       break;
        SJMP    ??halDigioIntEnable_4
//  280     case 1:
//  281       IEN2 |= 0x10;    // set P1IE bit
??halDigioIntEnable_1:
        ORL     0x9a,#0x10
//  282       P1IEN |= p->pin_bm;
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     0x8d,A
//  283       break;
        SJMP    ??halDigioIntEnable_4
//  284     case 2:
//  285       IEN2 |= 0x02;     // set P2IE bit
??halDigioIntEnable_2:
        ORL     0x9a,#0x2
//  286       P2IEN |= p->pin_bm; 
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        ORL     0xac,A
//  287       break;
        SJMP    ??halDigioIntEnable_4
//  288     default: 
//  289       return(HAL_DIGIO_ERROR);
??halDigioIntEnable_3:
        MOV     R1,#-0x1
//  290     }
//  291 
//  292 }
??halDigioIntEnable_4:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock6
        REQUIRE _A_IEN1
        REQUIRE P0IEN
        REQUIRE IEN2
        REQUIRE P1IEN
        REQUIRE P2IEN
//  293 
//  294 
//  295 /***********************************************************************************
//  296 * @fn      halDigioIntDisable
//  297 *
//  298 * @brief   Disable interrupt on IO pin
//  299 *
//  300 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  301 *
//  302 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  303 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  304 uint8 halDigioIntDisable(const digioConfig *p)
halDigioIntDisable:
        CFI Block cfiBlock7 Using cfiCommon0
        CFI Function halDigioIntDisable
        CODE
//  305 {
        ; Saved register size: 0
        ; Auto size: 0
//  306    
//  307 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock7
//  308 
//  309 
//  310 /***********************************************************************************
//  311 * @fn      halDigioIntClear
//  312 *
//  313 * @brief   Clear interrupt flag
//  314 *
//  315 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  316 *
//  317 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  318 */

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  319 uint8 halDigioIntClear(const digioConfig *p)
halDigioIntClear:
        CFI Block cfiBlock8 Using cfiCommon0
        CFI Function halDigioIntClear
        CODE
//  320 {
        PUSH    DPL
        CFI DPL0 Frame(CFA_SP, 4)
        CFI CFA_SP SP+-4
        PUSH    DPH
        CFI DPH0 Frame(CFA_SP, 5)
        CFI CFA_SP SP+-5
        ; Saved register size: 2
        ; Auto size: 0
//  321     switch (p->port)
        MOV     DPL,R2
        MOV     DPH,R3
        MOVX    A,@DPTR
        JZ      ??halDigioIntClear_0
        DEC     A
        JZ      ??halDigioIntClear_1
        DEC     A
        JZ      ??halDigioIntClear_2
        SJMP    ??halDigioIntClear_3
//  322     {
//  323     case 0: P0IFG &= ~p->pin_bm; break;
??halDigioIntClear_0:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        ANL     0x89,A
        SJMP    ??halDigioIntClear_4
//  324     case 1: P1IFG &= ~p->pin_bm; break;
??halDigioIntClear_1:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        ANL     0x8a,A
        SJMP    ??halDigioIntClear_4
//  325     case 2: P2IFG &= ~p->pin_bm; break;
??halDigioIntClear_2:
        MOV     DPL,R2
        MOV     DPH,R3
        INC     DPTR
        INC     DPTR
        MOVX    A,@DPTR
        CPL     A
        ANL     0x8b,A
        SJMP    ??halDigioIntClear_4
//  326     default: return(HAL_DIGIO_ERROR);
??halDigioIntClear_3:
        MOV     R1,#-0x1
        SJMP    ??halDigioIntClear_5
//  327     }
//  328     return(HAL_DIGIO_OK);
??halDigioIntClear_4:
        MOV     R1,#0x0
??halDigioIntClear_5:
        POP     DPH
        CFI DPH0 SameValue
        CFI CFA_SP SP+-4
        POP     DPL
        CFI DPL0 SameValue
        CFI CFA_SP SP+-3
        LJMP    ?BRET
        CFI EndBlock cfiBlock8
        REQUIRE P0IFG
        REQUIRE P1IFG
        REQUIRE P2IFG
//  329 }
//  330 
//  331 
//  332 /***********************************************************************************
//  333 * @fn      halDigioIntSetEdge
//  334 *
//  335 * @brief   Set edge for IO interrupt
//  336 *
//  337 * @param   digioConfig* p - pointer to configuration structure for IO pin
//  338 *          edge - HAL_DIGIO_INT_FALLING_EDGE or HAL_DIGIO_INT_RISING_EDGE
//  339 *
//  340 * @return  uint8 - HAL_DIGIO_ERROR or HAL_DIGIO_OK
//  341 */
//  342 
//  343 // Comment: all pins on port are configured at same time

        RSEG BANKED_CODE:CODE:NOROOT(0)
//  344 uint8 halDigioIntSetEdge(const digioConfig *p, uint8 edge)
halDigioIntSetEdge:
        CFI Block cfiBlock9 Using cfiCommon0
        CFI Function halDigioIntSetEdge
        CODE
//  345 {
        ; Saved register size: 0
        ; Auto size: 0
//  346  
//  347 }
        LJMP    ?BRET
        CFI EndBlock cfiBlock9

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioConfig?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioConfig

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioSet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioSet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioClear?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioToggle?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioToggle

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioGet?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioGet

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioIntConnect?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioIntConnect

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioIntEnable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioIntEnable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioIntDisable?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioIntDisable

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioIntClear?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioIntClear

        RSEG BANK_RELAYS:CODE:REORDER:NOROOT(0)
??halDigioIntSetEdge?relay:
        LCALL   ?BDISPATCH
        DATA
        DC24    halDigioIntSetEdge

        END
//  348 
//  349 /*
//  350 
//  351 HAL_ISR_FUNCTION(port0_ISR,P0INT_VECTOR)
//  352 {
//  353     register uint8 i;
//  354     P0IF = 0;
//  355     if (P0IFG)
//  356     {
//  357         for (i = 0; i < 8; i++)
//  358         {
//  359             register const uint8 pinmask = 1 << i;
//  360             if (P0IFG & pinmask) {
//  361                 if (port0_isr_tbl[i] != 0) {
//  362                 (*port0_isr_tbl[i])();
//  363                 }
//  364                 P0IFG &= ~pinmask;
//  365             }
//  366         }
//  367         //__low_power_mode_off_on_exit();
//  368     }
//  369 }
//  370 
//  371 
//  372 HAL_ISR_FUNCTION(port1_ISR,P1INT_VECTOR)
//  373 {
//  374     register uint8 i;
//  375     P1IF = 0;
//  376     if (P1IFG)
//  377     {
//  378         for (i = 0; i < 8; i++)
//  379         {
//  380             register const uint8 pinmask = 1 << i;
//  381             if (P1IFG & pinmask) {
//  382                 if (port1_isr_tbl[i] != 0) {
//  383                     (*port1_isr_tbl[i])();
//  384                 }
//  385                 P1IFG &= ~pinmask;
//  386             }
//  387         }
//  388         //__low_power_mode_off_on_exit();
//  389     }
//  390 }
//  391 
//  392 
//  393 HAL_ISR_FUNCTION(port2_ISR,P2INT_VECTOR)
//  394 {
//  395     register uint8 i;
//  396     P2IF = 0;
//  397     if (P2IFG)
//  398     {
//  399         for (i = 0; i < 5; i++)
//  400         {
//  401             register const uint8 pinmask = 1 << i;
//  402             if (P2IFG & pinmask) {
//  403                 if (port2_isr_tbl[i] != 0) {
//  404                     (*port2_isr_tbl[i])();
//  405                 }
//  406                 P2IFG &= ~pinmask;
//  407             }
//  408         }
//  409         //__low_power_mode_off_on_exit();
//  410     }
//  411 }
//  412 
//  413 */
// 
// 921 bytes in segment BANKED_CODE
//  60 bytes in segment BANK_RELAYS
//  18 bytes in segment SFR_AN
//  42 bytes in segment XDATA_Z
// 
// 981 bytes of CODE  memory
//   0 bytes of DATA  memory (+ 18 bytes shared)
//  42 bytes of XDATA memory
//
//Errors: none
//Warnings: 6
